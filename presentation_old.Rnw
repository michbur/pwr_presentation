\documentclass{beamer}
\usetheme{metropolis}
\usepackage[utf8]{inputenc}
\usepackage{amsfonts}
\usepackage{amsmath}
\usepackage{natbib}
\usepackage{graphicx}
\usepackage{array,booktabs,colortbl}
\usepackage{epstopdf}
\usepackage{colortbl, xcolor}
\usepackage{url}

\setlength\abovecaptionskip{-2pt}
\setbeamertemplate{caption}{\raggedright\insertcaption\par}

\title{n-gram analysis of biological sequences in R}
\date{}
\author{Micha\l{} Burdukiewicz}

\begin{document}
  \maketitle
  \section{Introduction}

\begin{frame}{Tools of the trade: R}

\textbf{R} is robust high-level programming language for data analysis.
\begin{itemize}
\item Controls full workflow: from data collection till report generation.
\item Interfaces for high performance computing and data storage systems.
\item Easy generation of web servers.
\end{itemize}

\end{frame}  

\begin{frame}{biogram package}
<<knitrIntro, echo = FALSE, message=FALSE,warning=FALSE>>=
source("my_ggplot_theme.R")

library(biogram)
library(seqinr)
library(dplyr)
library(reshape2)
library(xtable)
library(latex2exp)

g_legend<-function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)}

print_bt <- function(x) {
  rws <- 0L:(nrow(x) - 1)
  col <- c("\\rowcolor{green!10}", "\\rowcolor{blue!10}", "\\rowcolor{red!10}", "\\rowcolor{yellow!10}")
  print(xtable(x, digits = 0), booktabs = TRUE,
        add.to.row = list(pos = as.list(rws), command = col),
        print.results = FALSE)
}

print_bt2 <- function(x) {
  rws <- seq(1, nrow(x) - 1, by = 2)
  col <- rep("\\rowcolor[gray]{0.85}", length(rws))
  print(xtable(x, digits = 0), booktabs = TRUE,
        add.to.row = list(pos = as.list(rws), command = col),
        print.results = FALSE, include.rownames = FALSE)
}

do_pca <- function(x) 
  x %>% 
  select(-type, -taxon) %>% 
  prcomp(center = TRUE, scale = TRUE) %>% 
  getElement("x") %>% 
  data.frame() %>% 
  select(1, 2) %>% 
  cbind(select(x, type, taxon), .) %>% 
  mutate(type_nice = factor(type, labels = c("Mature peptide", "Signal peptide")),
         taxon_nice = factor(taxon, labels = c("other eukaryotes", "Plasmodium"))) %>% 
  mutate(both = paste0(type_nice, "\n(", taxon_nice, ")\n")) %>% 
  filter(type_nice == "Signal peptide")

plot_pca <- function(x)
  ggplot(x, aes(x = PC1, y = PC2, fill = both)) + 
  geom_density_2d(color = "black", contour = TRUE) +
  #geom_point() +
  stat_density2d(aes(fill=both,alpha=..level..), color = "black", contour = TRUE, geom="polygon") +
  scale_linetype_discrete("") +
  scale_fill_manual("", values = c("dodgerblue1", "firebrick1"), 
                    labels = c("Other eukaryotes", "Plasmodiidae")) +
  scale_shape_discrete("") +
  scale_color_discrete("") +
  scale_x_continuous("Principal Component 1\n") +
  scale_y_continuous("Principal Component 2") +
  scale_alpha_continuous(range = c(0.25, 0.4)) +
  guides(alpha = FALSE) +
  my_theme

load("./data/slam_summary.RData")
cls <- c("\\colorbox{green!10}", "\\colorbox{blue!10}", "\\colorbox{red!10}", "\\colorbox{yellow!10}")

freq_nondeg <- read.csv2("./data/freq_nondeg.csv")[, -1]
freq_deg <- read.csv2("./data/freq_deg.csv")[, -1]

dat_deg <- do_pca(freq_deg) 
dat_nondeg <- do_pca(freq_nondeg)
@
\textit{biogram}: the \textbf{R} package for the n-gram analysis of biological sequences.

n-grams: composite features describing the sequence.

biogram workflow:
\begin{enumerate}
\item Extract n-grams.
\item Change composition of n-grams
\item Filter n-grams.
\end{enumerate}

\end{frame}  

\begin{frame}{Biological sequences}
Long chains of amino acids (proteins) or nucleotides (RNA or DNA).

% http://www.uniprot.org/uniprot/Q8I0K7
% https://www.sciencenews.org/article/scorpion-genome-decoded
\vfill

Sample protein sequence:

\texttt{MRKLYCVLLLSAFEFTYMINFGRGQNYWEHPYQKSDVYHP}

\texttt{INEHREHPKEYQYPLHQEHTYQQEDSGEDENTLQHAYPID}

\texttt{HEGAEPAPQEQNLFSSIEIV...}

\end{frame}  

\begin{frame}{Biological sequences}

\begin{figure}
\includegraphics[width=0.55\textwidth]{static_figures/plasmodium.jpg}
\caption{\tiny \textit{Plasmodium falciparum}. Source: \url{http://www.protists.ensembl.org}}
\end{figure}

Protein of \textit{Plasmodium falciparum}:

\texttt{MRKLYCVLLLSAFEFTYMINFGRGQNYWEHPYQKSDVYHP}

\texttt{INEHREHPKEYQYPLHQEHTYQQEDSGEDENTLQHAYPID}

\texttt{HEGAEPAPQEQNLFSSIEIV...}
\end{frame}  

\begin{frame}{Biological sequences}

\begin{figure}
\includegraphics[width=0.55\textwidth]{static_figures/plasmodium.jpg}
\caption{\tiny \textit{Plasmodium falciparum}. Source: \url{http://www.protists.ensembl.org}}
\end{figure}

Protein of \textit{Plasmodium falciparum}, malaria-causing parasite:

\texttt{MRKLYCVLLLSAFEFTYMINFGRGQNYWEHPYQKSDVYHP}

\texttt{INEHREHPKEYQYPLHQEHTYQQEDSGEDENTLQHAYPID}

\texttt{HEGAEPAPQEQNLFSSIEIV...}
\end{frame}  


\begin{frame}{Biological sequences}

Signal peptide (red): n-terminal amino acid sequence directing proteins to the endomembrane system and next to extracellular localizations.

\texttt{\textcolor{red}{MRKLYCVLLLSAFEFTYMINFGRGQ}NYWEHPYQKSDVYHP}

\texttt{INEHREHPKEYQYPLHQEHTYQQEDSGEDENTLQHAYPID}

\texttt{HEGAEPAPQEQNLFSSIEIV...}

\end{frame}  

\begin{frame}{Biological sequences}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5>>=
seqs <- read.fasta("./data/seqs.fasta", seqtype = "AA")
seq_df <- lapply(seqs, function(i) i[1L:27]) %>% 
  do.call(rbind, .) %>% 
  cbind(name = sub(">", "", sapply(seqs, function(i) attr(i, "Annot"))), .) %>% 
  data.frame

colnames(seq_df)[-1] <- paste0("P", 1L:27)

mseq_df <- melt(seq_df, id.vars = "name",
     value.name = "aa", variable.name = "pos") %>% 
  mutate(aa = factor(aa, levels = a()[-1])) %>% 
  mutate(pos = as.numeric(sub("P", "", pos))) %>% 
  mutate(name = factor(gsub(" ", "\n", name))) %>% 
  mutate(name = relevel(name, "Plasmodium\nfalciparum")) %>% 
  mutate(sig = pos == "25") %>% 
  inner_join(data.frame(aa = a()[-1], hydr = aaprop[2, ]))

ggplot(mseq_df, aes(x = pos, y = name, label = aa, fill = aa)) +
  #geom_point(aes(x = pos, y = name, shape = sig), size = 7, color = "red", stroke = 1) +
  geom_tile() +
  geom_text(size = 5) +
  scale_x_continuous("Position") + 
  scale_y_discrete("") +
  scale_fill_discrete(guide = FALSE) +
  #scale_shape_manual(guide = FALSE, values = c(NA, 21)) +
  geom_vline(xintercept = 24.5, color = "black", size = 2) +
  my_theme +
  theme(axis.text = element_text(size=12),
        panel.grid.major = element_line(color="NA", 
                                        linetype = "dashed", size = 0.5))
@

Common patterns are hard to identify.
\end{frame}  

\section{n-grams}

\begin{frame}{n-grams}
n-grams (k-tuples) are vectors of $n$ characters derived from input sequence(s). 

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
sample_seq <- as.matrix(seq_df[, 2L:10])
colnames(sample_seq) <- paste0("P", 1L:ncol(sample_seq))
rownames(sample_seq) <- c("PF", "HS", "SL", "SP")
sample_seq_dat <- data.frame(sample_seq)
cat(print_bt(sample_seq_dat))
@

1-grams:
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
decode_ngrams(seq2ngrams(sample_seq, 1, aa_v, d = 0)[1L:8]) %>% 
  #paste0(",") %>%
  paste0(cls, .) %>% 
  gsub("_", "-", x = .) %>% 
  cat(sep = ", ")
@
\end{frame}

\begin{frame}{n-grams}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
cat(print_bt(sample_seq_dat))
@

2-grams:
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
decode_ngrams(seq2ngrams(sample_seq, 2, aa_v, d = 0)[1L:8]) %>% 
  #paste0(",") %>%
  paste0(cls, "{", ., "}") %>% 
  gsub("_", "-", x = .) %>% 
  cat(sep = ", ")
@
\end{frame}

\begin{frame}{n-grams}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
cat(print_bt(sample_seq_dat))
@

3-grams:
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
decode_ngrams(seq2ngrams(sample_seq, 3, aa_v, d = 0)[1L:8]) %>% 
  #paste0(",") %>%
  paste0(cls, "{", ., "}") %>% 
  gsub("_", "-", x = .) %>% 
  cat(sep = ", ")
@
\end{frame}

\begin{frame}{n-grams}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
cat(print_bt(sample_seq_dat))
@

2-grams (with a single gap):
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
decode_ngrams(seq2ngrams(sample_seq, 2, aa_v, d = 1)[1L:8]) %>% 
  #paste0(",") %>%
  paste0(cls, "{", ., "}") %>% 
  gsub("_", "-", x = .) %>% 
  cat(sep = ", ")
@
\end{frame}

\begin{frame}{n-grams}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
cat(print_bt(sample_seq_dat))
@

3-grams (with gaps):
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
decode_ngrams(seq2ngrams(sample_seq, 3, aa_v, d = c(1, 2))[1L:8]) %>% 
  #paste0(",") %>%
  paste0(cls, "{", ., "}") %>% 
  gsub("_", " - ", x = .) %>% 
  cat(sep = ", ")
@
\end{frame}

\begin{frame}{Proposed model}
$$
\textrm{y} \sim \textrm{n-gram}_1 + \textrm{n-gram}_2 + \ldots + \textrm{n-gram}_n
$$

Problems: 
\begin{itemize}
\item large number of possible n-grams,
\item the majority of n-grams is noninformative.
\end{itemize}
\end{frame}

\begin{frame}{n-gram counts}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
L <- 5
m <- 20
m2 <- 4
n <- 1:5
n_max <- L*m^n
n_max2 <- L*m2^n
dat <- data.frame(n = c(n, n), n_max = c(n_max, n_max2), m = c(rep(m, 5), rep(m2, 5)))
dat[["m"]] <- factor(dat[["m"]])

ggplot(filter(dat, m == 20), aes(x = n, y = n_max, color = m, label = formatC(n_max, digits = 4))) +
  geom_text(x = 1, y = 7, color = "black", 
            label = as.character(TeX("$n_{max} = m^n$")), parse = TRUE, size = 6) +
  geom_line(linetype="dotted", size=1.5) +
  geom_point(size=7, shape=16) +
  geom_text(size = 6, vjust = -1.5, hjust = -0.05) +
  coord_cartesian(ylim = c(100, 8e7), xlim = c(0.5, 5.7)) +
  scale_x_continuous("n (n-gram length)", breaks = 0L:5) +
  scale_y_continuous(TeX("$n_{max}$ (number of possible n-grams)"), trans = "log10") +
  scale_color_manual("m (alphabet length)", values = "maroon1") +
  my_theme
@
\end{frame}

\begin{frame}{n-gram counts}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
full_ngram_table <- count_multigrams(c(1, 2), c(0, 0), u = a()[-1], as.matrix(seq_df[, -1])) %>% 
  as.matrix %>% 
  as.data.frame

data.frame(full_ngram_table[1L:5], `...` = rep("...", 4), full_ngram_table[110L:112], `...` = rep("...", 4),
           row.names = c("PF", "HS", "SL", "SP"), check.names = FALSE) %>% 
  print_bt %>% 
  cat
@

The sparcity of the n-gram count matrix grows with $n$.
\end{frame}

\begin{frame}{sparse matrix representation}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
get_mb <- function(x) {
  y <- x
  class(y) <- "object_size"
  format(y, "Mb")
}

slam_summary <- mutate(slam_summary, size_mb = get_mb(size)) %>% 
  group_by(method, ngrams) %>% 
  mutate(size_mb = ifelse(size == max(size), size_mb, ""))

ggplot(slam_summary, aes(x = n_seq, y = size, color = method, label = size_mb)) +
  geom_point() +
  geom_text(hjust = 1.1) +
  scale_x_continuous("Number of sequences") +
  scale_y_continuous("Size [bytes]") +
  scale_color_manual("Matrix type", values = c("cadetblue", "maroon1"), labels = c("slam", "base")) +
  facet_wrap(~ ngrams, ncol = 1, scales = "free_y") +
  my_theme
@
\end{frame}


\section{Reduction of the amino acid alphabet}

\begin{frame}{Properites of amino acids}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4>>=
hydr_df <- data.frame(aa = a()[-1], hydr = aaprop[2, ])

ggplot(hydr_df, aes(x = aa, y = hydr)) + 
  geom_bar(stat = "identity") + 
  scale_x_discrete("Amino acid") +
  scale_y_continuous("Hydrophobicity") +
  my_theme
@

Amino acids may be described using their physicochemical properites.

\end{frame}

\begin{frame}{Properites of amino acids}

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5>>=
ggplot(filter(mseq_df, pos != 1), aes(x = pos, y = hydr, group = name)) +
  geom_point() +
  geom_line() +
  #geom_point(aes(x = pos, y = name, shape = sig), size = 7, color = "red", stroke = 1) +
  scale_x_continuous("Position") + 
  scale_y_continuous("Hydrophobicity") +
  scale_color_discrete(guide = FALSE) +
  geom_smooth() +
  my_theme +
  facet_wrap(~ name)
@

Patterns of hydrophobicity in signal peptides.

\end{frame} 

\begin{frame}{Reduction of the alphabet}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
L <- 5
m <- 20
m2 <- 4
n <- 1:5
n_max <- L*m^n
n_max2 <- L*m2^n
dat <- data.frame(n = c(n, n), n_max = c(n_max, n_max2), m = c(rep(m, 5), rep(m2, 5)))
dat[["m"]] <- factor(dat[["m"]])

ggplot(dat, aes(x = n, y = n_max, color = m, label = formatC(n_max, digits = 4))) +
  geom_text(x = 1, y = 7, color = "black", 
            label = as.character(TeX("$n_{max} = m^n$")), parse = TRUE, size = 6) +
  geom_line(linetype="dotted", size=1.5) +
  geom_point(size=7, shape=16) +
  geom_text(size = 6, vjust = -1.5, hjust = -0.05) +
  coord_cartesian(ylim = c(100, 8e7), xlim = c(0.5, 5.7)) +
  scale_x_continuous("n (n-gram length)", breaks = 0L:5) +
  scale_y_continuous(TeX("$n_{max}$ (number of possible n-grams)"), trans = "log10") +
  scale_color_manual("m (alphabet length)", values = c("cadetblue", "maroon1")) +
  my_theme
@
\end{frame}

\begin{frame}{Ranking alphabets}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=

set.seed(3)
exdat <- data.frame(
  alph = paste0("A", 1L:5), 
  c1 = 0.7 + runif(5)/5,
  c2 = 0.75 + runif(5)/5,
  c3 = 0.65 + runif(5)/5
) %>% 
  melt %>% 
  group_by(variable) %>% 
  mutate(r = rank(value)) %>% 
  ungroup

best_alph <- group_by(exdat, alph) %>%
  summarise(cr = sum(r)) %>%
  arrange(desc(cr)) %>% 
  slice(1) %>% 
  select(alph) %>% 
  unlist %>% 
  as.character

exdat <- mutate(exdat, best = alph == best_alph)

ggplot(exdat, aes(y = variable, x = value, color = alph)) +
  geom_point(size = 7) +
  scale_x_continuous("AUC") +
  scale_y_discrete("Category", labels = paste0("Category ", 1L:3)) +
  scale_color_discrete("Alphabet") +
  my_theme

@
\end{frame}


\begin{frame}{Ranking alphabets}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=
ggplot(exdat, aes(y = variable, x = value, color = alph, label = (r - 6)*-1)) +
  geom_text(size = 7) +
  scale_x_continuous("AUC") +
  scale_y_discrete("Category", labels = paste0("Category ", 1L:3)) +
  scale_color_discrete("Alphabet") +
  scale_shape_discrete("Best reduced alphabet") +
  my_theme


@
We rank alphabets separately in all length categories assuming the rank 1 for the best AUC, rank 2 for the second best AUC and so on.


\end{frame}



\begin{frame}{Ranking alphabets}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=
ggplot(exdat, aes(y = variable, x = value, color = alph, shape = best)) +
  geom_point(size = 7) +
  scale_x_continuous("AUC") +
  scale_y_discrete("Category", labels = paste0("Category ", 1L:3)) +
  scale_color_discrete("Alphabet") +
  scale_shape_discrete("Best reduced alphabet") +
  my_theme


@
The best-performing alphabet has the lowest sum of ranks.  

\end{frame}

\begin{frame}{Reduction of the alphabet}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
p1 <- plot_pca(dat_nondeg) + ggtitle("Unreduced amino acid alphabet")
p2 <- plot_pca(dat_deg) + ggtitle("Reduced amino acid alphabet")

print(p1)
@
PCA analysis of amino acid frequency in signal peptides.
\end{frame}

\begin{frame}{Reduction of the alphabet}
\begin{table}[ht]
\centering
\begin{tabular}{ll}
  \toprule
Group & Amino acids \\ 
  \midrule
I & D, E, H, K, N, Q, R \\ 
   \rowcolor[gray]{0.85}II & G, P, S, T, Y \\ 
  III & F, I, L, M, V, W \\ 
   \rowcolor[gray]{0.85} IV & A, C \\ 
   \bottomrule
\end{tabular}
\end{table}
\end{frame}
 
\begin{frame}{Reduction of the alphabet}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.1,results='asis'>>=
print(p2)
@
PCA analysis of amino acid frequency in signal peptides. Reduced amino acid alphabet groups together signal peptides belonging to \textit{Plasmodiidae} and other eukaryotes.
\end{frame}

\section{Filtering n-grams}


\begin{frame}{Permutation Test}
  Informative n-grams are usually selected using permutation tests.

During a permutation test we shuffle randomly class labels and compute a defined statistic (e.g. information gain). Values of the statistic for permuted data are compared with the value of statistic for original data.

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
set.seed(1)
perm_dat <- data.frame(target = c(rep(0, 50), rep(1, 50)), 
           f1 = sample(c(rep(0, 54), rep(1, 46))), 
           f2 = c(sample(c(rep(0, 45), rep(1, 5))),
                  sample(c(rep(0, 9), rep(1, 41))))
)

tab1 <- data.frame(table(perm_dat[, 1], perm_dat[, 2]))
colnames(tab1) <- c("Target", "n-gram I", "Count")
tab2 <- data.frame(table(perm_dat[, 1], perm_dat[, 3]))
colnames(tab2) <- c("Target", "n-gram II", "Count")

nonperm_igs <- calc_criterion(perm_dat[, 1], perm_dat[, -1], calc_ig)
@
\end{frame}


\begin{frame}{Permutation Test}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
set.seed(1)
perm_example <- data.frame(target = c(rep(0, 3), rep(1, 3)), 
           `Original data` = c(0, 1, 1, 0, 1, 0),
           `Permuted data 1` = c(1, 0, 1, 0, 1, 0),
           `Permuted data 2` = c(1, 1, 1, 0, 0, 0),
           `...` = rep("...", 6),
           check.names = FALSE
           )

cat(print_bt2(perm_example))
@

$$
\textrm{p-value} = \frac{N_{T_P > T_R}}{N} $$

$N_{T_P > T_R}$: number of cases, where $T_P$ (permuted test statistic) has more extreme values than $T_R$ (test statistic for original data).

$N$: number of permutations.
  \end{frame}

\begin{frame}{QuiPT}
  \textbf{Qui}ck \textbf{P}ermutation \textbf{T}est is a fast alternative to permutation tests for n-gram data. It computes a probability for a given contigency table providing the exact p-value for the specic value level of the test statistic.
  
\begin{table}[!htb]
    \begin{minipage}{.5\linewidth}
    \caption{IG: \textcolor{blue}{\Sexpr{round(nonperm_igs[1], 4)}}}
      \centering
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
cat(print_bt2(tab1))
@
    \end{minipage}%
    \begin{minipage}{.5\linewidth}
    \caption{IG: \textcolor{red}{\Sexpr{round(nonperm_igs[2], 4)}}}
      \centering
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
cat(print_bt2(tab2))
@
    \end{minipage} 
\end{table}

\end{frame}



  
\begin{frame}{QuiPT}  
  
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
ig1 <- distr_crit(target = perm_dat[,1], feature = perm_dat[,2])
ig2 <- distr_crit(target = perm_dat[,1], feature = perm_dat[,3])

ig_data <- data.frame(x = as.numeric(rownames(attr(ig1, "plot_data"))), 
                attr(ig1, "plot_data"))  %>% 
  melt(id.vars = "x", variable.name = "panel", value.name = "y") %>% 
  mutate(panel = factor(panel, labels = c("Information Gain", "Probability")))


ig_legend <- g_legend(ggplot(data = ig_data, mapping = aes(x = x, y = y, color = panel)) +
  geom_line(size = 1.5) +
  scale_color_manual("", values = c("blue", "red"), 
                       labels = c("n-gram I", "n-gram II")) +
  my_theme)

ig_plot_prob <- ggplot(data = filter(ig_data, panel == "Probability"), mapping = aes(x = x, y = y)) + 
  geom_freqpoly(stat = "identity") +
  xlab("Number of cases with n-gram=1 and target=1") + 
  ylab("Probability") +
  geom_vline(xintercept = 25, color = "blue", size = 1.5) +
  geom_vline(xintercept = 41, color = "red", size = 1.5) +
  my_theme

ig_plot_ig <- ggplot(data = filter(ig_data, panel == "Information Gain"), mapping = aes(x = x, y = y)) + 
  geom_freqpoly(stat = "identity") + 
  xlab("Number of cases with feature=1 and target=1") + 
  ylab("Information Gain") +
  geom_vline(xintercept = 25, color = "blue", size = 1.5) +
  geom_vline(xintercept = 41, color = "red", size = 1.5) +
  my_theme

grid.arrange(ig_plot_prob, ig_plot_ig, ig_legend, ncol = 1, heights = c(0.47, 0.47, 0.06))
@
\end{frame}

\begin{frame}{Sensitivity of QuiPT}
Simulation:
\begin{enumerate}
\iem Generating random sequences of different lengths.
\item Adding set of informative motifs to the half of sequences.
\item Performing QuiPT.
\end{enumerate}

\end{frame}

\begin{frame}{Sensitivity of QuiPT}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
sim_quipt <- read.csv("./data/sim_evaluation50.csv") %>%
  mutate(motif_len = nchar(gsub(".", "", ngrams2df(as.character(motif))[["ngram"]], fixed = TRUE))) 

tm_pvals <- filter(sim_quipt, criterion == "ig") %>% 
  select(l_seq, n_seq, p.value, motif_len) %>% 
  mutate(n_seq = factor(n_seq, levels = 1L:4* 250),
         l_seq = factor(l_seq)) %>% 
  mutate(n_seq = factor(n_seq, labels = paste0("Number of sequences: ", levels(n_seq))))
  
ggplot(tm_pvals, aes(x = l_seq, y = p.value, color = as.factor(motif_len))) +
  geom_boxplot() +
  facet_wrap( ~ n_seq) +
  scale_y_continuous("p-value of informative motifs") +
  scale_x_discrete("Sequence length") +
  scale_color_manual("", values = c("maroon1", "cadetblue"), labels = c("2-gram", "3-gram")) +
  my_theme
@

QuiPT works best for large data sets of short sequences.

\end{frame}


\section{Summary and conclusion}

\begin{frame}{Summary} 
\textit{biogram}: the \textbf{R} package for the n-gram analysis of biological sequences.

biogram workflow:
\begin{enumerate}
\item Extract n-grams (\texttt{count\_ngrams()} and \texttt{count\_multigrams()}).
\item Change an alphabet (\texttt{calc\_ed()} and \texttt{calc\_si()}).
\item Filter n-grams (\texttt{test\_features()}).
\end{enumerate}
\end{frame} 

\begin{frame}{Summary} 

\textit{biogram}: the \textbf{R} package for the n-gram analysis of biological sequences.

\url{https://CRAN.R-project.org/package=biogram} (1.3)
\url{http://github.com/michbur/biogram} (1.4)
\end{frame}  

\begin{frame}{Case study}

Burdukiewicz M, Sobczyk P, Rödiger S, Duda-Madej A, Mackiewicz P, Kotulska M. (2016) \textbf{Prediction of amyloidogenicity based on the n-gram analysis.} \textit{PeerJ Preprints} 4:e2390v1 \url{https://doi.org/10.7287/peerj.preprints.2390v1}

A novel method of detecting amyloids, proteins involded in many neurodegenerative disorders, such as Alzheimer's or Creutzfeldt-Jakob's diseases based on n-grams used to train a random forest classifier (\url{http://www.smorfland.uni.wroc.pl/shiny/AmyloGram/}).


\end{frame}

\begin{frame}{Acknowledgements and funding}

This research was partially funded by the KNOW Consortium and National Science Center (2015/17/N/NZ2/01845).

\begin{itemize}
\item Paweł Mackiewicz,
\item Małgorzata Kotulska,
\item \textbf{biogram} package (\url{https://cran.r-project.org/package=biogram}):
\begin{itemize}
\small
\item Piotr Sobczyk,
\item Chris Lauber.
\end{itemize}
\end{itemize}

\end{frame}
 
\end{document}